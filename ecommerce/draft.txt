1 - Carrinho;
    recupera da session

2 - Endereço;
    recupera da session

3 - Formas de entrega, com os diferentes valores;
    - Entrega pela loja ou pelo app
    - Entrega expressa - mais cara
    - Entrega planejada

4 - Cupons de desconto;

5 - Forma de pagamento;
    - Pix
    - Credito

6 - Confirmar pedido;


<script>
    const aplicarCupomBtn = document.querySelector('#aplicar-cupom-btn');

    if (aplicarCupomBtn) {
        aplicarCupomBtn.addEventListener('click', function() {
            // Desativa o botão
            aplicarCupomBtn.disabled = true;
        })
    }
</script>



Entregas:
    pedido = Pedido()

<script>
        const formaEntrega = document.querySelector('select[name="forma_de_entrega"]');
        const agendarForm = document.getElementById('agendar-form');
        const btnSelecionar = document.getElementById('btn_selecionar');
        const selectField = document.querySelector('select[name*="forma_de_entrega"]')

        // Quando o botão "Selecionar" for clicado
        if (btnSelecionar) {
            btnSelecionar.addEventListener('click', function() {
                // Exibe o formulário de "Entrega Agendada" se a opção for "agendada"
                if (formaEntrega.value === 'agendada') {
                    agendarForm.style.display = 'block';
                }
            });
        }

    </script>






    if request.method == "POST":
        loja_id = request.POST.get("loja_id")
        loja = get_object_or_404(Loja, id=loja_id)

        # Recupera o pedido ativo do usuário
        pedido = Pedido.objects.filter(user=request.user, is_active=True).last()
        if not pedido:
            return redirect('ecommerce:carrinho')
        
        # Instancia os forms com os dados do POST
        forma_form = forms.FormaDeEntregaForm(request.POST)
        agendada_form = forms.EntregaAgendadaForm(request.POST)

        if forma_form.is_valid():
            forma_de_entrega = forma_form.cleaned_data["forma_de_entrega"]

            # Cria ou atualiza a entrega associada ao pedido
            entrega, created = Entrega.objects.get_or_create(
                pedido=pedido,
                endereco_loja=loja.endereco, 
            )
            entrega.forma_de_entrega = forma_de_entrega
            entrega.save()

            # Tratamento de entrega agendada
            if forma_de_entrega == 'agendada':
                if agendada_form.is_valid():
                    datetime_entrega = datetime.combine(
                        agendada_form.cleaned_data["data"],
                        agendada_form.cleaned_data["hora"]
                    )
                    # Atualiza ou cria uma entrega agendada
                    EntregaAgendada.objects.update_or_create(
                        pedido=pedido,
                        defaults={
                            "datetime_entrega": datetime_entrega,
                            "endereco_loja": loja.endereco,
                            "forma_de_entrega": forma_de_entrega,
                        },
                    )
                else:
                    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                        return JsonResponse(
                            {"status": "error", "message": "Erro na validação da entrega agendada."},
                            status=400,
                        )
                    return redirect('ecommerce:confirmar_pedido')
                
            if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                return JsonResponse(
                    {"status": "success"}
                )

        # Erro na validação do formulário
        if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
            return JsonResponse(
                {"status": "error", "message": "Erro na validação da forma de entr"},
                status=400,
            )

    return redirect('ecommerce:confirmar_pedido')


confirmar_pedido view

    itens_por_loja ={    # MUDAR ISSO DAQUI ACHO 
        loja: list(items)
        for loja, items in groupby(itens, key=lambda x: x.produto.loja)
    }


forma_de_entrega view
    # Instancia os forms com os dados do POST
        forma_form = forms.FormaDeEntregaForm(request.POST)
        agendada_form = forms.EntregaAgendadaForm(request.POST)

        if forma_form.is_valid():
            forma_de_entrega = forma_form.cleaned_data["forma_de_entrega"]

            # Cria ou atualiza a entrega associada ao pedido
            entrega, created = Entrega.objects.get_or_create(
                pedido=pedido,
                endereco_loja=loja.endereco, 
            )
            entrega.forma_de_entrega = forma_de_entrega
            entrega.save()

            # Tratamento de entrega agendada
            if forma_de_entrega == 'agendada':
                if agendada_form.is_valid():
                    agendamento = agendada_form.save(commit=False)
                    agendamento.pedido = pedido
                    agendamento.endereco_loja = loja.endereco
                    agendamento.forma_de_entrega = forma_de_entrega
                    agendamento.save()
                else:
                    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                        return JsonResponse(
                            {"status": "error", "message": "Erro na validação da entrega agendada."},
                            status=400,
                        )
                    return redirect('ecommerce:confirmar_pedido')
                
            if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                return JsonResponse(
                    {"status": "success"}
                )

        # Erro na validação do formulário
        if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
            return JsonResponse(
                {"status": "error", "message": "Erro na validação da forma de entrega."},
                status=400,
            )



 // Função para verificar se todas as formas de entrega foram selecionadas
            const verificarFormasDeEntrega = () => {
                let todasSelecionadas = true;

                console.log("Entrou na função verificarFormasDeEntrega")

                formaEntregaForms.forEach(form => {
                    const formaEntregaSelect = form.querySelector('select[name="forma_de_entrega"]');
                    if (!formaEntregaSelect.value) {
                    todasSelecionadas = false;
                    }
                });

                confirmarPedidoBtn.disabled = !todasSelecionadas; // Desabilita/Habilita o botão
            }
            

            d-flex justify-content-between align-items-center




agendada_form = forms.EntregaAgendadaForm(request.POST)
                if agendada_form.is_valid():
                    try:
                        entrega_agendada = EntregaAgendada.objects.get(
                            pedido=pedido,
                            endereco_loja=loja.endereco,
                            is_active=True
                        )
                        # Atualiza os campos da entrega agendada existente
                        for field, value in agendada_form.cleaned_data.items():
                            setattr(entrega_agendada, field, value)
                    except EntregaAgendada.DoesNotExist:
                        # Deleta as entregas relacionadas ao mesmo pedido e loja
                        Entrega.objects.filter(
                            pedido=pedido, 
                            endereco_loja=loja.endereco
                        ).delete()
                        # Cria uma nova entrega agendada
                        entrega_agendada = agendada_form.save(commit=False)
                        entrega_agendada.pedido = pedido
                        entrega_agendada.endereco_loja = loja.endereco
                        entrega_agendada.forma_de_entrega = forma_de_entrega
                        # Copia os campos relevantes da entrega original
                        entrega_agendada.taxa_de_entrega = entrega.taxa_de_entrega
                        entrega_agendada.peso = entrega.peso
                        entrega_agendada.volume = entrega.volume
                        entrega_agendada.entrega_pelo_app = entrega.entrega_pelo_app

                    # Desativa a entrega original
                    entrega.is_active = False
                    entrega.save()

                    # Salva a entrega agendada
                    entrega_agendada.save()
                else:
                    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                        return JsonResponse(
                            {"status": "error", "message": "Erro na validação da entrega agendada"},
                            status=400
                        )
                    messages.error(request, "Erro na validação da entrega agendada")
                    return redirect('ecommerce:confirmar_pedido')