1 - Carrinho;
    recupera da session

2 - Endereço;
    recupera da session

3 - Formas de entrega, com os diferentes valores;
    - Entrega pela loja ou pelo app
    - Entrega expressa - mais cara
    - Entrega planejada

4 - Cupons de desconto;

5 - Forma de pagamento;
    - Pix
    - Credito

6 - Confirmar pedido;


<script>
    const aplicarCupomBtn = document.querySelector('#aplicar-cupom-btn');

    if (aplicarCupomBtn) {
        aplicarCupomBtn.addEventListener('click', function() {
            // Desativa o botão
            aplicarCupomBtn.disabled = true;
        })
    }
</script>



Entregas:
    pedido = Pedido()

<script>
        const formaEntrega = document.querySelector('select[name="forma_de_entrega"]');
        const agendarForm = document.getElementById('agendar-form');
        const btnSelecionar = document.getElementById('btn_selecionar');
        const selectField = document.querySelector('select[name*="forma_de_entrega"]')

        // Quando o botão "Selecionar" for clicado
        if (btnSelecionar) {
            btnSelecionar.addEventListener('click', function() {
                // Exibe o formulário de "Entrega Agendada" se a opção for "agendada"
                if (formaEntrega.value === 'agendada') {
                    agendarForm.style.display = 'block';
                }
            });
        }

    </script>






    if request.method == "POST":
        loja_id = request.POST.get("loja_id")
        loja = get_object_or_404(Loja, id=loja_id)

        # Recupera o pedido ativo do usuário
        pedido = Pedido.objects.filter(user=request.user, is_active=True).last()
        if not pedido:
            return redirect('ecommerce:carrinho')
        
        # Instancia os forms com os dados do POST
        forma_form = forms.FormaDeEntregaForm(request.POST)
        agendada_form = forms.EntregaAgendadaForm(request.POST)

        if forma_form.is_valid():
            forma_de_entrega = forma_form.cleaned_data["forma_de_entrega"]

            # Cria ou atualiza a entrega associada ao pedido
            entrega, created = Entrega.objects.get_or_create(
                pedido=pedido,
                endereco_loja=loja.endereco, 
            )
            entrega.forma_de_entrega = forma_de_entrega
            entrega.save()

            # Tratamento de entrega agendada
            if forma_de_entrega == 'agendada':
                if agendada_form.is_valid():
                    datetime_entrega = datetime.combine(
                        agendada_form.cleaned_data["data"],
                        agendada_form.cleaned_data["hora"]
                    )
                    # Atualiza ou cria uma entrega agendada
                    EntregaAgendada.objects.update_or_create(
                        pedido=pedido,
                        defaults={
                            "datetime_entrega": datetime_entrega,
                            "endereco_loja": loja.endereco,
                            "forma_de_entrega": forma_de_entrega,
                        },
                    )
                else:
                    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                        return JsonResponse(
                            {"status": "error", "message": "Erro na validação da entrega agendada."},
                            status=400,
                        )
                    return redirect('ecommerce:confirmar_pedido')
                
            if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                return JsonResponse(
                    {"status": "success"}
                )

        # Erro na validação do formulário
        if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
            return JsonResponse(
                {"status": "error", "message": "Erro na validação da forma de entr"},
                status=400,
            )

    return redirect('ecommerce:confirmar_pedido')


confirmar_pedido view

    itens_por_loja ={    # MUDAR ISSO DAQUI ACHO 
        loja: list(items)
        for loja, items in groupby(itens, key=lambda x: x.produto.loja)
    }


forma_de_entrega view
    # Instancia os forms com os dados do POST
        forma_form = forms.FormaDeEntregaForm(request.POST)
        agendada_form = forms.EntregaAgendadaForm(request.POST)

        if forma_form.is_valid():
            forma_de_entrega = forma_form.cleaned_data["forma_de_entrega"]

            # Cria ou atualiza a entrega associada ao pedido
            entrega, created = Entrega.objects.get_or_create(
                pedido=pedido,
                endereco_loja=loja.endereco, 
            )
            entrega.forma_de_entrega = forma_de_entrega
            entrega.save()

            # Tratamento de entrega agendada
            if forma_de_entrega == 'agendada':
                if agendada_form.is_valid():
                    agendamento = agendada_form.save(commit=False)
                    agendamento.pedido = pedido
                    agendamento.endereco_loja = loja.endereco
                    agendamento.forma_de_entrega = forma_de_entrega
                    agendamento.save()
                else:
                    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                        return JsonResponse(
                            {"status": "error", "message": "Erro na validação da entrega agendada."},
                            status=400,
                        )
                    return redirect('ecommerce:confirmar_pedido')
                
            if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                return JsonResponse(
                    {"status": "success"}
                )

        # Erro na validação do formulário
        if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
            return JsonResponse(
                {"status": "error", "message": "Erro na validação da forma de entrega."},
                status=400,
            )



 // Função para verificar se todas as formas de entrega foram selecionadas
            const verificarFormasDeEntrega = () => {
                let todasSelecionadas = true;

                console.log("Entrou na função verificarFormasDeEntrega")

                formaEntregaForms.forEach(form => {
                    const formaEntregaSelect = form.querySelector('select[name="forma_de_entrega"]');
                    if (!formaEntregaSelect.value) {
                    todasSelecionadas = false;
                    }
                });

                confirmarPedidoBtn.disabled = !todasSelecionadas; // Desabilita/Habilita o botão
            }
            

            d-flex justify-content-between align-items-center




agendada_form = forms.EntregaAgendadaForm(request.POST)
                if agendada_form.is_valid():
                    try:
                        entrega_agendada = EntregaAgendada.objects.get(
                            pedido=pedido,
                            endereco_loja=loja.endereco,
                            is_active=True
                        )
                        # Atualiza os campos da entrega agendada existente
                        for field, value in agendada_form.cleaned_data.items():
                            setattr(entrega_agendada, field, value)
                    except EntregaAgendada.DoesNotExist:
                        # Deleta as entregas relacionadas ao mesmo pedido e loja
                        Entrega.objects.filter(
                            pedido=pedido, 
                            endereco_loja=loja.endereco
                        ).delete()
                        # Cria uma nova entrega agendada
                        entrega_agendada = agendada_form.save(commit=False)
                        entrega_agendada.pedido = pedido
                        entrega_agendada.endereco_loja = loja.endereco
                        entrega_agendada.forma_de_entrega = forma_de_entrega
                        # Copia os campos relevantes da entrega original
                        entrega_agendada.taxa_de_entrega = entrega.taxa_de_entrega
                        entrega_agendada.peso = entrega.peso
                        entrega_agendada.volume = entrega.volume
                        entrega_agendada.entrega_pelo_app = entrega.entrega_pelo_app

                    # Desativa a entrega original
                    entrega.is_active = False
                    entrega.save()

                    # Salva a entrega agendada
                    entrega_agendada.save()
                else:
                    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                        return JsonResponse(
                            {"status": "error", "message": "Erro na validação da entrega agendada"},
                            status=400
                        )
                    messages.error(request, "Erro na validação da entrega agendada")
                    return redirect('ecommerce:confirmar_pedido')




/* Cartões dos Produtos */

.card {
    border-radius: 10px;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1); /* Sombra leve */
    overflow: hidden;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.card:hover {
    transform: translateY(-5px); /* Leve elevação ao passar o mouse */
    box-shadow: 0px 8px 12px rgba(0, 0, 0, 0.2); /* Sombra mais forte */
}

/* Corpo do cartão */
.card-body {
    padding: 20px;
    text-align: center; /* Centraliza o texto dentro do card */
}

/* Imagens */
.card img {
    object-fit: contain;
    border-bottom: 2px solid #ec4c2c; /* Destaque visual */
}

/* Títulos */
.card-title {
    font-size: 1.2em;
    font-weight: bold;
    margin: 10px 0;
    color: #333;
}

/* Preços */
.card p strong {
    color: #ec4c2c;
    font-size: 1.1em;
}

/* Avaliações com estrelas */
.star-rating .filled-star {
    color: #ffd700; /* Dourado para estrelas preenchidas */
}

.star-rating .empty-star {
    color: #ccc; /* Cinza para estrelas vazias */
}

/* Logo e Icones */

#card-logo-loja {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 10px;
    border-radius: 8px;
    background-color: #f9f9f9; /* Fundo claro */
    border: 1px solid #ddd;
}

#card-logo-loja img {
    border-radius: 50%;
    object-fit: cover;
}

/* Ícones de ações */
#card-icones a img {
    transition: transform 0.3s ease;
    object-fit: cover;
}

#card-icones a:hover img {
    transform: scale(1.1); /* Ampliar ícone levemente no hover */
}

.link {
    color: #ec4c2c; /* Texto laranja permanente */
    text-decoration: none; /* Remove sublinhado */
    font-weight: bold; /* Destaca o texto */
    transition: color 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease; /* Efeitos suaves */
}

.link:hover {
    color: #d43a20; /* Escurece o texto no hover */
    transform: translateY(-2px); /* Elevação no hover */
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1); /* Sombra no hover */
    text-decoration: none; /* Garante que o sublinhado não volte */
}

/* new features css */


/* Navegação principal */
.nav-pills .nav-link {
    color: #333;
    border-radius: 5px;
    transition: background-color 0.3s ease, color 0.3s ease;
}

.nav-pills .nav-link:hover {
    background-color: #ec4c2c;
    color: white;
}

.nav-pills .nav-link.active {
    background-color: #ec4c2c;
    color: white;
    font-weight: bold;
}




{% extends "ecommerce/layout.html" %}

{% load ecommerce_filters %}

{% block body %}
<h2 class="mb-4">Produtos</h2>

<!-- Todos os produtos  -->
<div class="row">
    {% for produto in produtos %}
        <div class="col-6 mb-4">
            <a href="{% url 'ecommerce:detalhes_produto' produto.id %}" class="text-decoration-none text-dark">
                <div class="card h-100">
                    <!-- Parte superior do card -->
                    <div class="row no-gutters flex-grow-1">
                        <!-- Imagem do produto -->
                        <div class="col-lg-4 col-md-5">
                            <img src="{{ produto.photo.url }}" alt="{{ produto }}" width="100%" height="200px">
                        </div>
                        <!-- Informações do produto -->
                        <div class="col-md-8">
                            <div class="card-body">
                                <span class="star-rating">
                                    {% for i in 5|to_range_D:0 %}
                                        {% if i <= produto.nota %}
                                            <span class="filled-star star-size">★</span>
                                        {% else %}
                                            <span class="empty-star star-size">★</span>
                                        {% endif %}
                                    {% endfor %}
                                </span>
                                {% if produto.nota %}
                                    <p>{{ produto.nota }} ({{ produto.avaliacoes }})</p>
                                {% else %}
                                    <p>Nenhuma avaliação (0)</p>
                                {% endif %}
                                <h5 class="card-title"><strong>{{ produto }}</strong></h5>
                                <p><strong>R$ {{ produto.preco }}</strong></p>
                                <p>
                                    {{ produto.descricao|slice:250 }}
                                    {% if produto.descricao|length > 250 %}...{% endif %}
                                </p>
                            </div>
                        </div>
                    </div>

                    <!-- Rodapé do cartão -->
                    <div class="card-footer mt-auto">
                        <div class="d-flex align-items-center justify-content-between">
                            <!-- Logo da loja -->
                            <a href="{% url 'ecommerce:produtos_loja' produto.loja.id %}">
                                {% if produto.loja.logo %}
                                    <img src="{{ produto.loja.logo.url }}" alt="{{ produto.loja.nome }}" width="60px" height="60px">
                                {% endif %}
                            </a>
                            <!-- Ícone do carrinho -->
                            <div id="card-icones" class="me-3">
                                <a href="{% url 'ecommerce:adicionar_ao_carrinho' produto.id %}">
                                    <img src="media/icones/carrinho.png" alt="Adicionar ao carrinho" width="40px" height="40px">
                                </a>
                            </div>
                        </div>
                        <!-- Mensagens de erro -->
                        <div class="erro">
                            {% for message in messages %}
                                {% if produto.id|stringformat:"s"|add:" error" == message.tags %}
                                    <p class="alert alert-danger">{{ message }}</p>
                                {% endif %}
                            {% endfor %}
                        </div>
                    </div>
                </div>
            </a>
        </div>
    {% endfor %}
</div>
{% endblock body %}



{% extends "ecommerce/layout.html" %}

{% load ecommerce_filters %}

{% block body %}
    <h2 class="mb-4">Produtos</h2>

    <!-- Todos os produtos  -->
    <div class="row">
        {% for produto in produtos %}
            <div class="col-6 mb-4">
                <a href="{% url 'ecommerce:detalhes_produto' produto.id %}" class="text-decoration-none text-dark">
                    <div class="card h-100">
                        <div class="row no-gutters">

                            <div class="col-lg-4 col-md-5">
                                <img src="{{ produto.photo.url }}" alt="{{ produto }}" width="100%" height="200px"> 
                            </div>

                            <div class="col-md-8">
                                <div class="card-body">
                                    <span class="star-rating">
                                        {% for i in 5|to_range_D:0 %}
                                            {% if i <= produto.nota %}
                                                <span class="filled-star star-size">★</span>
                                            {% else %}
                                                <span class="empty-star star-size">★</span>
                                            {% endif %}
                                        {% endfor %}
                                    </span>
                                    {% if produto.nota %}
                                        <p>{{ produto.nota }} ({{ produto.avaliacoes }})</p>
                                    {% else %}
                                        <p>Nenhuma avaliação (0)</p>
                                    {% endif %}
                                    <h5 class="card-title"><strong>{{ produto }}</strong></h5>
                                    <p><strong>R$ {{ produto.preco }}</strong></p>
                                    <p>
                                        {{ produto.descricao|slice:250 }}
                                        {% if produto.descricao|length > 250 %}...{% endif %}
                                    </p>
                                </div>
                            </div>

                        </div>
                        

                        <div id="card-logo-loja" class="card mt-2">
                            <div class="row align-items-center">
                                <div class="card-body d-flex align-items-center justify-content-between">
                                    <a href="{% url 'ecommerce:produtos_loja' produto.loja.id %}">
                                        {% if produto.loja.logo %}
                                            <img src="{{ produto.loja.logo.url }}" alt="{{ produto.loja.nome }}" width="60px" height="60px">
                                        {% endif %}
                                    </a>
                                    <div id="card-icones" class="card-footer me-3"> <!-- 'ms-3' adiciona margem entre logo e texto -->
                                        <a href="{% url 'ecommerce:adicionar_ao_carrinho' produto.id %}">
                                            <img src="media/icones/carrinho.png" alt="Adicionar ao carrinho" width="40px" height="40px">
                                        </a>
                                    </div>
                                </div>
                                <div class="erro">
                                    {% for message in messages %}
                                        {% if produto.id|stringformat:"s"|add:" error" == message.tags %}
                                            <p class="alert alert-danger">{{ message }}</p>
                                        {% endif %}
                                    {% endfor %}
                                </div>
                            </div>
                        </div>

                    </div>
                </a>
            </div>
        {% endfor %}
    </div>

    
{% endblock body %}